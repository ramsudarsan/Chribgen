{"map":"{\"version\":3,\"sources\":[\"/home/ram385/chromeextensions/chribgen/node_modules/file-loader/dist/cjs.js??ref--6-oneOf-7!/home/ram385/chromeextensions/chribgen/src/logo.svg\",\"/home/ram385/chromeextensions/chribgen/src/Search.js\",\"/home/ram385/chromeextensions/chribgen/src/App.js\",\"/home/ram385/chromeextensions/chribgen/src/serviceWorker.js\",\"/home/ram385/chromeextensions/chribgen/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"Search\",\"_ref\",\"updateSearch\",\"react_default\",\"a\",\"createElement\",\"type\",\"onChange\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"event\",\"fetch\",\"then\",\"response\",\"console\",\"log\",\"json\",\"state\",\"className\",\"src_Search\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCUzBC,eARA,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,aACb,OACIC,EAAAC,EAAAC,cAAA,MAAA,KACIF,EAAAC,EAAAC,cAAA,QAAA,CAAOC,KAAK,SAASC,SAAUL,OCyB5BM,cAxBb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMFV,aAAe,SAACc,GACdC,MAAM,6FAA6FC,KAAK,SAAAC,GACtGC,QAAQC,IAAIF,EAASG,QAAQJ,KAAK,SAAAI,GAChCF,QAAQC,IAAIC,QARhBb,EAAKc,MAAQ,GAFDd,wEAgBZ,OACEN,EAAAC,EAAAC,cAAA,MAAA,CAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAACoB,EAAD,CAAQvB,aAAcU,KAAKV,uBAnBjBwB,EAAAA,WCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/logo.5d5d9eef.svg\\\";\",\"import React from 'react';\\n\\nconst Search = ({updateSearch}) => {\\n    return (\\n        <div>\\n            <input type=\\\"search\\\" onChange={updateSearch}></input>\\n        </div>\\n    );\\n}\\n\\nexport default Search;\",\"import React, { Component } from 'react';\\nimport logo from './logo.svg';\\nimport './App.css';\\nimport Search from './Search'\\n\\nclass App extends Component {\\n  constructor() {\\n    super()\\n    this.state = {\\n\\n    }\\n  }\\n\\n  updateSearch = (event) => {\\n    fetch('https://cors-anywhere.herokuapp.com/http://libgen.io/json.php?lg_topic=libgen&ids=1,6,800').then(response => {\\n      console.log(response.json()).then(json => {\\n        console.log(json);\\n      });\\n    })\\n  }\\n\\n  render() {\\n    return (\\n      <div className=\\\"App\\\">\\n        <Search updateSearch={this.updateSearch}/>\\n      </div>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,n,t){},16:function(e,n,t){e.exports=t.p+\"static/media/logo.5d5d9eef.svg\"},17:function(e,n,t){},19:function(e,n,t){\"use strict\";t.r(n);var o=t(0),a=t.n(o),c=t(2),r=t.n(c),i=(t(14),t(3)),s=t(4),u=t(6),l=t(5),h=t(7),p=(t(16),t(17),function(e){var n=e.updateSearch;return a.a.createElement(\"div\",null,a.a.createElement(\"input\",{type:\"search\",onChange:n}))}),d=function(e){function n(){var e;return Object(i.a)(this,n),(e=Object(u.a)(this,Object(l.a)(n).call(this))).updateSearch=function(e){fetch(\"https://cors-anywhere.herokuapp.com/http://libgen.io/json.php?lg_topic=libgen&ids=1,6,800\").then(function(e){console.log(e.json()).then(function(e){console.log(e)})})},e.state={},e}return Object(h.a)(n,e),Object(s.a)(n,[{key:\"render\",value:function(){return a.a.createElement(\"div\",{className:\"App\"},a.a.createElement(p,{updateSearch:this.updateSearch}))}}]),n}(o.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(a.a.createElement(d,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,n,t){e.exports=t(19)}},[[8,2,1]]]);","extractedComments":[]}